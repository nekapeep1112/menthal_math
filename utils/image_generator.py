from PIL import Image, ImageDraw, ImageFont
import os
from typing import List, Tuple

class ImageGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–±—É—á–∞—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∏"""
    
    def __init__(self):
        self.width = 800
        self.height = 600
        self.bg_color = (255, 255, 255)  # –ë–µ–ª—ã–π —Ñ–æ–Ω
        self.text_color = (50, 50, 50)   # –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π —Ç–µ–∫—Å—Ç
        self.accent_color = (0, 123, 255)  # –°–∏–Ω–∏–π –∞–∫—Ü–µ–Ω—Ç
        self.success_color = (40, 167, 69)  # –ó–µ–ª–µ–Ω—ã–π
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à—Ä–∏—Ñ—Ç
        self.title_font = self._get_font(36)
        self.text_font = self._get_font(24)
        self.small_font = self._get_font(18)
    
    def _get_font(self, size: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç Windows
            return ImageFont.truetype("arial.ttf", size)
        except:
            try:
                return ImageFont.truetype("DejaVuSans.ttf", size)
            except:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç PIL
                return ImageFont.load_default()
    
    def create_soroban_basics(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ—Å–Ω–æ–≤–∞–º–∏ —Å–æ—Ä–æ–±–∞–Ω–∞"""
        img = Image.new('RGB', (self.width, self.height), self.bg_color)
        draw = ImageDraw.Draw(img)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = "üßÆ –û–°–ù–û–í–´ –ú–ï–ù–¢–ê–õ–¨–ù–û–ì–û –°–ß–ï–¢–ê"
        title_bbox = draw.textbbox((0, 0), title, font=self.title_font)
        title_x = (self.width - (title_bbox[2] - title_bbox[0])) // 2
        draw.text((title_x, 30), title, fill=self.accent_color, font=self.title_font)
        
        # –†–∏—Å—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–æ—Ä–æ–±–∞–Ω
        soroban_x = 50
        soroban_y = 100
        
        # –†–∞–º–∫–∞ —Å–æ—Ä–æ–±–∞–Ω–∞
        draw.rectangle([soroban_x, soroban_y, soroban_x + 300, soroban_y + 200], 
                      outline=self.text_color, width=3)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
        draw.line([soroban_x, soroban_y + 60, soroban_x + 300, soroban_y + 60], 
                 fill=self.text_color, width=2)
        
        # –°—Ç–æ–ª–±—Ü—ã —Å –∫–æ—Å—Ç–æ—á–∫–∞–º–∏
        for i in range(5):
            col_x = soroban_x + 50 + i * 40
            
            # –í–µ—Ä—Ö–Ω—è—è –∫–æ—Å—Ç–æ—á–∫–∞ (5)
            draw.ellipse([col_x - 8, soroban_y + 20, col_x + 8, soroban_y + 40], 
                        fill=self.success_color)
            
            # –ù–∏–∂–Ω–∏–µ –∫–æ—Å—Ç–æ—á–∫–∏ (1, 1, 1, 1)
            for j in range(4):
                bead_y = soroban_y + 80 + j * 25
                draw.ellipse([col_x - 8, bead_y, col_x + 8, bead_y + 20], 
                           fill=self.accent_color)
            
            # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è (—Å—Ç–µ—Ä–∂–µ–Ω—å)
            draw.line([col_x, soroban_y + 10, col_x, soroban_y + 190], 
                     fill=self.text_color, width=2)
        
        # –û–±—ä—è—Å–Ω–µ–Ω–∏—è
        explanations = [
            "‚Ä¢ 1 –≤–µ—Ä—Ö–Ω—è—è –∫–æ—Å—Ç–æ—á–∫–∞ = 5 –µ–¥–∏–Ω–∏—Ü",
            "‚Ä¢ 4 –Ω–∏–∂–Ω–∏–µ –∫–æ—Å—Ç–æ—á–∫–∏ = –ø–æ 1 –µ–¥–∏–Ω–∏—Ü–µ",
            "‚Ä¢ –ö–∞–∂–¥—ã–π —Å—Ç–æ–ª–±–µ—Ü = —Ä–∞–∑—Ä—è–¥ —á–∏—Å–ª–∞",
            "‚Ä¢ –°–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ: –µ–¥–∏–Ω–∏—Ü—ã, –¥–µ—Å—è—Ç–∫–∏, —Å–æ—Ç–Ω–∏..."
        ]
        
        y_pos = 350
        for explanation in explanations:
            draw.text((50, y_pos), explanation, fill=self.text_color, font=self.text_font)
            y_pos += 40
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        filepath = "media/photos/basics_1.jpg"
        img.save(filepath, "JPEG", quality=95)
        return filepath
    
    def create_hand_position(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–∑–∏—Ü–∏–µ–π —Ä—É–∫"""
        img = Image.new('RGB', (self.width, self.height), self.bg_color)
        draw = ImageDraw.Draw(img)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = "ü§≤ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ü–û–ó–ò–¶–ò–Ø –†–£–ö"
        title_bbox = draw.textbbox((0, 0), title, font=self.title_font)
        title_x = (self.width - (title_bbox[2] - title_bbox[0])) // 2
        draw.text((title_x, 30), title, fill=self.accent_color, font=self.title_font)
        
        # –†–∏—Å—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ä—É–∫–∏
        # –ü—Ä–∞–≤–∞—è —Ä—É–∫–∞
        draw.text((50, 120), "–ü–†–ê–í–ê–Ø –†–£–ö–ê:", fill=self.success_color, font=self.text_font)
        
        # –ë–æ–ª—å—à–æ–π –ø–∞–ª–µ—Ü
        draw.ellipse([100, 160, 140, 200], fill=self.accent_color)
        draw.text((150, 170), "–ë–æ–ª—å—à–æ–π –ø–∞–ª–µ—Ü", fill=self.text_color, font=self.small_font)
        draw.text((150, 190), "–í–µ—Ä—Ö–Ω–∏–µ –∫–æ—Å—Ç–æ—á–∫–∏ (√ó5)", fill=self.text_color, font=self.small_font)
        
        # –£–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–ª–µ—Ü  
        draw.ellipse([100, 220, 140, 260], fill=self.success_color)
        draw.text((150, 230), "–£–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–ª–µ—Ü", fill=self.text_color, font=self.small_font)
        draw.text((150, 250), "–ù–∏–∂–Ω–∏–µ –∫–æ—Å—Ç–æ—á–∫–∏ (√ó1)", fill=self.text_color, font=self.small_font)
        
        # –õ–µ–≤–∞—è —Ä—É–∫–∞
        draw.text((400, 120), "–õ–ï–í–ê–Ø –†–£–ö–ê:", fill=self.success_color, font=self.text_font)
        draw.text((400, 160), "‚Ä¢ –ü—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ—Ä–æ–±–∞–Ω", fill=self.text_color, font=self.small_font)
        draw.text((400, 180), "‚Ä¢ –ü–æ–º–æ–≥–∞–µ—Ç —Å –±–æ–ª—å—à–∏–º–∏ —á–∏—Å–ª–∞–º–∏", fill=self.text_color, font=self.small_font)
        draw.text((400, 200), "‚Ä¢ –£—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö", fill=self.text_color, font=self.small_font)
        
        # –í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
        rules = [
            "–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:",
            "‚Ä¢ –î–≤–∏–∂–µ–Ω–∏—è —á–µ—Ç–∫–∏–µ –∏ –±—ã—Å—Ç—Ä—ã–µ",
            "‚Ä¢ –†—É–∫–∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω—ã",
            "‚Ä¢ –í–∑–≥–ª—è–¥ —Å–ª–µ–¥—É–µ—Ç –∑–∞ –ø–∞–ª—å—Ü–∞–º–∏",
            "‚Ä¢ –ù–∞—á–∏–Ω–∞–π—Ç–µ –º–µ–¥–ª–µ–Ω–Ω–æ, —É—Å–∫–æ—Ä—è–π—Ç–µ—Å—å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ"
        ]
        
        y_pos = 320
        for i, rule in enumerate(rules):
            color = self.accent_color if i == 0 else self.text_color
            font = self.text_font if i == 0 else self.small_font
            draw.text((50, y_pos), rule, fill=color, font=font)
            y_pos += 30
        
        filepath = "media/photos/basics_7.jpg"
        img.save(filepath, "JPEG", quality=95)
        return filepath
    
    def create_concentration_techniques(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ—Ö–Ω–∏–∫–∞–º–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏"""
        img = Image.new('RGB', (self.width, self.height), self.bg_color)
        draw = ImageDraw.Draw(img)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = "–†–ê–ó–í–ò–¢–ò–ï –ö–û–ù–¶–ï–ù–¢–†–ê–¶–ò–ò"
        title_bbox = draw.textbbox((0, 0), title, font=self.title_font)
        title_x = (self.width - (title_bbox[2] - title_bbox[0])) // 2
        draw.text((title_x, 20), title, fill=self.accent_color, font=self.title_font)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –∫—Ä—É–≥ –¥—ã—Ö–∞–Ω–∏—è
        center_x, center_y = 150, 180
        radius = 60
        
        # –ö—Ä—É–≥ –¥—ã—Ö–∞–Ω–∏—è
        draw.ellipse([center_x - radius, center_y - radius, 
                     center_x + radius, center_y + radius], 
                    outline=self.accent_color, width=3)
        
        # –ü–æ–¥–ø–∏—Å–∏ –∫ –∫—Ä—É–≥—É
        draw.text((center_x - 20, center_y - 8), "–í–î–û–•", fill=self.success_color, font=self.small_font)
        draw.text((center_x - 40, center_y + 70), "4 - 4 - 4 - 4", fill=self.accent_color, font=self.small_font)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - —Ç–µ—Ö–Ω–∏–∫–∏
        draw.text((300, 80), "–¢–ï–•–ù–ò–ö–ò –ö–û–ù–¶–ï–ù–¢–†–ê–¶–ò–ò:", fill=self.success_color, font=self.text_font)
        
        # –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ
        draw.text((300, 120), "–ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ:", fill=self.accent_color, font=self.text_font)
        breathing_steps = [
            "‚Ä¢ –í–¥–æ—Ö –Ω–∞ 4 —Å—á–µ—Ç–∞",
            "‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 4 —Å—á–µ—Ç–∞", 
            "‚Ä¢ –í—ã–¥–æ—Ö –Ω–∞ 4 —Å—á–µ—Ç–∞",
            "‚Ä¢ –ü–∞—É–∑–∞ –Ω–∞ 4 —Å—á–µ—Ç–∞"
        ]
        
        y_pos = 150
        for step in breathing_steps:
            draw.text((310, y_pos), step, fill=self.text_color, font=self.small_font)
            y_pos += 25
        
        # –í–∏–∑—É–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è
        draw.text((300, 270), "–í–∏–∑—É–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è:", fill=self.accent_color, font=self.text_font)
        visual_steps = [
            "‚Ä¢ –§–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Ç–æ—á–∫–µ",
            "‚Ä¢ –£–¥–µ—Ä–∂–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞ —Å–æ—Ä–æ–±–∞–Ω–∞",
            "‚Ä¢ –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏—è—Ö"
        ]
        
        y_pos = 300
        for step in visual_steps:
            draw.text((310, y_pos), step, fill=self.text_color, font=self.small_font)
            y_pos += 25
        
        # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –≤–Ω–∏–∑—É
        draw.text((50, 420), "–ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –°–û–í–ï–¢–´:", fill=self.success_color, font=self.text_font)
        draw.text((60, 450), "‚Ä¢ –ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å –≤ —Ç–∏—Ö–æ–º –º–µ—Å—Ç–µ", fill=self.text_color, font=self.small_font)
        draw.text((60, 475), "‚Ä¢ –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å 5-10 –º–∏–Ω—É—Ç", fill=self.text_color, font=self.small_font)
        draw.text((400, 450), "‚Ä¢ –£–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–ª–µ–∫–∞—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã", fill=self.text_color, font=self.small_font)
        draw.text((400, 475), "‚Ä¢ –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –≤—Ä–µ–º—è", fill=self.text_color, font=self.small_font)
        
        filepath = "media/photos/basics_2.jpg"
        img.save(filepath, "JPEG", quality=95)
        return filepath
    
    def create_speed_rules(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –±—ã—Å—Ç—Ä–æ–≥–æ —Å—á–µ—Ç–∞"""
        img = Image.new('RGB', (self.width, self.height), self.bg_color)
        draw = ImageDraw.Draw(img)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = "‚ö° –ü–†–ê–í–ò–õ–ê –ë–´–°–¢–†–û–ì–û –°–ß–ï–¢–ê"
        title_bbox = draw.textbbox((0, 0), title, font=self.title_font)
        title_x = (self.width - (title_bbox[2] - title_bbox[0])) // 2
        draw.text((title_x, 30), title, fill=self.accent_color, font=self.title_font)
        
        # –ü—Ä–∏–Ω—Ü–∏–ø "–î—Ä—É–∑—å—è"
        draw.text((50, 100), "üéØ –ü–†–ò–ù–¶–ò–ü '–î–†–£–ó–¨–Ø':", fill=self.success_color, font=self.text_font)
        
        friends = [
            "1 + 4 = 5",
            "2 + 3 = 5"
        ]
        
        for i, friend in enumerate(friends):
            y = 140 + i * 30
            # –†–∞–º–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            draw.rectangle([60, y - 5, 200, y + 25], outline=self.accent_color, width=2)
            draw.text((70, y), friend, fill=self.text_color, font=self.text_font)
        
        # –ü—Ä–∏–Ω—Ü–∏–ø "–ë—Ä–∞—Ç—å—è"
        draw.text((300, 100), "üîÑ –ü–†–ò–ù–¶–ò–ü '–ë–†–ê–¢–¨–Ø':", fill=self.success_color, font=self.text_font)
        
        brothers = [
            "1 + 9 = 10",
            "2 + 8 = 10",
            "3 + 7 = 10", 
            "4 + 6 = 10"
        ]
        
        for i, brother in enumerate(brothers):
            y = 140 + i * 30
            # –†–∞–º–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            draw.rectangle([310, y - 5, 450, y + 25], outline=self.accent_color, width=2)
            draw.text((320, y), brother, fill=self.text_color, font=self.text_font)
        
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
        sequence = [
            "üìö –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨ –û–ë–£–ß–ï–ù–ò–Ø:",
            "1. –ü—Ä–æ—Å—Ç–æ–µ —Å–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã—á–∏—Ç–∞–Ω–∏–µ",
            "2. –†–∞–±–æ—Ç–∞ —Å '–¥—Ä—É–∑—å—è–º–∏' (–¥–æ 5)",
            "3. –†–∞–±–æ—Ç–∞ —Å '–±—Ä–∞—Ç—å—è–º–∏' (–¥–æ 10)", 
            "4. –î–≤—É–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞",
            "5. –¢—Ä–µ—Ö–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞"
        ]
        
        y_pos = 280
        for i, step in enumerate(sequence):
            color = self.success_color if i == 0 else self.text_color
            font = self.text_font if i == 0 else self.small_font
            draw.text((50, y_pos), step, fill=color, font=font)
            y_pos += 30
        
        filepath = "media/photos/basics_3.jpg"
        img.save(filepath, "JPEG", quality=95)
        return filepath
    
    def create_memory_training(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π –ø–∞–º—è—Ç–∏"""
        img = Image.new('RGB', (self.width, self.height), self.bg_color)
        draw = ImageDraw.Draw(img)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = "üß† –¢–†–ï–ù–ò–†–û–í–ö–ê –ü–ê–ú–Ø–¢–ò"
        title_bbox = draw.textbbox((0, 0), title, font=self.title_font)
        title_x = (self.width - (title_bbox[2] - title_bbox[0])) // 2
        draw.text((title_x, 30), title, fill=self.accent_color, font=self.title_font)
        
        # –ü—Ä–∏–º–µ—Ä —á–∏—Å–ª–æ–≤–æ–π —Ü–µ–ø–æ—á–∫–∏
        chain = "3 ‚Üí 7 ‚Üí 2 ‚Üí 9 ‚Üí 5"
        chain_bbox = draw.textbbox((0, 0), chain, font=self.title_font)
        chain_x = (self.width - (chain_bbox[2] - chain_bbox[0])) // 2
        
        # –†–∞–º–∫–∞ –¥–ª—è —Ü–µ–ø–æ—á–∫–∏
        draw.rectangle([chain_x - 20, 90, chain_x + (chain_bbox[2] - chain_bbox[0]) + 20, 130], 
                      fill=(240, 248, 255), outline=self.accent_color, width=2)
        draw.text((chain_x, 100), chain, fill=self.accent_color, font=self.title_font)
        
        # –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        exercises = [
            "üî¢ –ß–ò–°–õ–û–í–´–ï –¶–ï–ü–û–ß–ö–ò:",
            "‚Ä¢ –ó–∞–ø–æ–º–Ω–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
            "‚Ä¢ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –≤ –ø—Ä—è–º–æ–º –ø–æ—Ä—è–¥–∫–µ",
            "‚Ä¢ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ",
            "",
            "üé® –í–ò–ó–£–ê–õ–¨–ù–ê–Ø –ü–ê–ú–Ø–¢–¨:",
            "‚Ä¢ –ó–∞–ø–æ–º–∏–Ω–∞–π—Ç–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Å—Ç–æ—á–µ–∫",
            "‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —è—Ä–∫–∏–µ –æ–±—Ä–∞–∑—ã —á–∏—Å–µ–ª",
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–≤–µ—Ç–æ–≤—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏",
            "",
            "üîÑ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–ò:",
            "‚Ä¢ –ó–∞–ø–æ–º–∏–Ω–∞–π—Ç–µ —Ü–µ–ø–æ—á–∫–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π",
            "‚Ä¢ –£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
        ]
        
        y_pos = 170
        for exercise in exercises:
            if exercise.startswith("üî¢") or exercise.startswith("üé®") or exercise.startswith("üîÑ"):
                color = self.success_color
                font = self.text_font
            elif exercise == "":
                y_pos += 10
                continue
            else:
                color = self.text_color
                font = self.small_font
            
            draw.text((50, y_pos), exercise, fill=color, font=font)
            y_pos += 25
        
        filepath = "media/photos/basics_4.jpg"
        img.save(filepath, "JPEG", quality=95)
        return filepath

    def create_addition_examples(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Å–ª–æ–∂–µ–Ω–∏—è"""
        img = Image.new('RGB', (self.width, self.height), self.bg_color)
        draw = ImageDraw.Draw(img)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = "–ü–†–ò–ú–ï–†–´ –°–õ–û–ñ–ï–ù–ò–Ø"
        title_bbox = draw.textbbox((0, 0), title, font=self.title_font)
        title_x = (self.width - (title_bbox[2] - title_bbox[0])) // 2
        draw.text((title_x, 20), title, fill=self.accent_color, font=self.title_font)
        
        # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã
        draw.text((50, 80), "–ü–†–û–°–¢–´–ï:", fill=self.success_color, font=self.text_font)
        
        simple_examples = ["2 + 3 = 5", "4 + 1 = 5", "1 + 2 = 3"]
        y_pos = 110
        for example in simple_examples:
            draw.rectangle([50, y_pos - 3, 200, y_pos + 22], 
                         outline=self.accent_color, width=1, fill=(240, 248, 255))
            draw.text((60, y_pos), example, fill=self.text_color, font=self.small_font)
            y_pos += 30
        
        # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º  
        draw.text((300, 80), "–° –ü–ï–†–ï–•–û–î–û–ú:", fill=self.success_color, font=self.text_font)
        
        complex_examples = ["7 + 4 = 11", "9 + 3 = 12", "8 + 6 = 14"]
        y_pos = 110
        for example in complex_examples:
            draw.rectangle([300, y_pos - 3, 450, y_pos + 22], 
                         outline=self.accent_color, width=1, fill=(240, 248, 255))
            draw.text((310, y_pos), example, fill=self.text_color, font=self.small_font)
            y_pos += 30
        
        # –î–≤—É–∑–Ω–∞—á–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã (—à–∏—Ä–æ–∫–∏–µ –±–ª–æ–∫–∏)
        draw.text((50, 240), "–î–í–£–ó–ù–ê–ß–ù–´–ï:", fill=self.success_color, font=self.text_font)
        
        big_examples = ["23 + 15 = 38", "47 + 29 = 76", "34 + 28 = 62"]
        y_pos = 270
        for example in big_examples:
            draw.rectangle([50, y_pos - 3, 250, y_pos + 22], 
                         outline=self.accent_color, width=1, fill=(240, 248, 255))
            draw.text((60, y_pos), example, fill=self.text_color, font=self.small_font)
            y_pos += 30
        
        # –°–æ–≤–µ—Ç—ã –≤–Ω–∏–∑—É
        draw.text((50, 380), "–°–û–í–ï–¢–´:", fill=self.success_color, font=self.text_font)
        tips = [
            "‚Ä¢ –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤",
            "‚Ä¢ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π—Ç–µ –¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞ —Å–æ—Ä–æ–±–∞–Ω–µ", 
            "‚Ä¢ –¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ 10-15 –º–∏–Ω—É—Ç"
        ]
        
        y_pos = 410
        for tip in tips:
            draw.text((60, y_pos), tip, fill=self.text_color, font=self.small_font)
            y_pos += 25
        
        filepath = "media/photos/basics_5.jpg"
        img.save(filepath, "JPEG", quality=95)
        return filepath

    def create_subtraction_examples(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –≤—ã—á–∏—Ç–∞–Ω–∏—è"""
        img = Image.new('RGB', (self.width, self.height), self.bg_color)
        draw = ImageDraw.Draw(img)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = "‚ûñ –ü–†–ò–ú–ï–†–´ –í–´–ß–ò–¢–ê–ù–ò–Ø"
        title_bbox = draw.textbbox((0, 0), title, font=self.title_font)
        title_x = (self.width - (title_bbox[2] - title_bbox[0])) // 2
        draw.text((title_x, 20), title, fill=self.accent_color, font=self.title_font)
        
        # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã
        draw.text((50, 80), "–ü–†–û–°–¢–´–ï:", fill=self.success_color, font=self.text_font)
        
        simple_examples = ["5 - 2 = 3", "8 - 3 = 5", "7 - 4 = 3"]
        y_pos = 110
        for example in simple_examples:
            draw.rectangle([50, y_pos - 3, 200, y_pos + 22], 
                         outline=(220, 53, 69), width=1, fill=(253, 237, 241))
            draw.text((60, y_pos), example, fill=self.text_color, font=self.small_font)
            y_pos += 30
        
        # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Å –∑–∞–Ω—è—Ç–∏–µ–º
        draw.text((300, 80), "–° –ó–ê–ù–Ø–¢–ò–ï–ú:", fill=self.success_color, font=self.text_font)
        
        complex_examples = ["12 - 7 = 5", "15 - 8 = 7", "23 - 9 = 14"]
        y_pos = 110
        for example in complex_examples:
            draw.rectangle([300, y_pos - 3, 450, y_pos + 22], 
                         outline=(220, 53, 69), width=1, fill=(253, 237, 241))
            draw.text((310, y_pos), example, fill=self.text_color, font=self.small_font)
            y_pos += 30
        
        # –ë–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞ (—à–∏—Ä–æ–∫–∏–µ –±–ª–æ–∫–∏)
        draw.text((50, 240), "–ë–û–õ–¨–®–ò–ï –ß–ò–°–õ–ê:", fill=self.success_color, font=self.text_font)
        
        big_examples = ["56 - 28 = 28", "84 - 37 = 47", "93 - 46 = 47"]
        y_pos = 270
        for example in big_examples:
            draw.rectangle([50, y_pos - 3, 250, y_pos + 22], 
                         outline=(220, 53, 69), width=1, fill=(253, 237, 241))
            draw.text((60, y_pos), example, fill=self.text_color, font=self.small_font)
            y_pos += 30
        
        # –¢–µ—Ö–Ω–∏–∫–∏ (–æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤ –æ–¥–∏–Ω –±–ª–æ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–∞–ª–æ–∂–µ–Ω–∏—è)
        draw.text((50, 370), "–¢–ï–•–ù–ò–ö–ò –í–´–ß–ò–¢–ê–ù–ò–Ø:", fill=self.accent_color, font=self.text_font)
        
        # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Ç–µ—Ö–Ω–∏–∫
        left_techniques = [
            "‚Ä¢ –ü—Ä–∏ –∑–∞–Ω—è—Ç–∏–∏ –∏–∑ —Å—Ç–∞—Ä—à–µ–≥–æ —Ä–∞–∑—Ä—è–¥–∞",
            "‚Ä¢ –î–≤–∏–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ—á–Ω—ã–º–∏", 
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
        ]
        
        y_pos = 400
        for technique in left_techniques:
            draw.text((60, y_pos), technique, fill=self.text_color, font=self.small_font)
            y_pos += 25
        
        # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Ç–µ—Ö–Ω–∏–∫
        right_techniques = [
            "‚Ä¢ –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ –∫—Ä—É–≥–ª–æ–≥–æ —á–∏—Å–ª–∞",
            "‚Ä¢ –†–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏",
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ '–¥—Ä—É–∑–µ–π'"
        ]
        
        y_pos = 400
        for technique in right_techniques:
            draw.text((400, y_pos), technique, fill=self.text_color, font=self.small_font)
            y_pos += 25
        
        filepath = "media/photos/basics_6.jpg"
        img.save(filepath, "JPEG", quality=95)
        return filepath

    def create_multiplication_table(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–∞–±–ª–∏—Ü–µ–π —É–º–Ω–æ–∂–µ–Ω–∏—è"""
        img = Image.new('RGB', (self.width, self.height), self.bg_color)
        draw = ImageDraw.Draw(img)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = "‚úñÔ∏è –¢–ê–ë–õ–ò–¶–ê –£–ú–ù–û–ñ–ï–ù–ò–Ø"
        title_bbox = draw.textbbox((0, 0), title, font=self.title_font)
        title_x = (self.width - (title_bbox[2] - title_bbox[0])) // 2
        draw.text((title_x, 30), title, fill=self.accent_color, font=self.title_font)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É —É–º–Ω–æ–∂–µ–Ω–∏—è
        start_x, start_y = 50, 100
        cell_width, cell_height = 70, 30
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        for i in range(1, 6):
            # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            draw.rectangle([start_x + i * cell_width, start_y, 
                           start_x + (i + 1) * cell_width, start_y + cell_height],
                          fill=self.accent_color)
            draw.text((start_x + i * cell_width + 25, start_y + 8), 
                     str(i), fill='white', font=self.text_font)
            
            # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            draw.rectangle([start_x, start_y + i * cell_height, 
                           start_x + cell_width, start_y + (i + 1) * cell_height],
                          fill=self.accent_color)
            draw.text((start_x + 25, start_y + i * cell_height + 8), 
                     str(i), fill='white', font=self.text_font)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        for i in range(1, 6):
            for j in range(1, 6):
                result = i * j
                x = start_x + j * cell_width
                y = start_y + i * cell_height
                
                # –†–∞–º–∫–∞ —è—á–µ–π–∫–∏
                draw.rectangle([x, y, x + cell_width, y + cell_height],
                              outline=self.text_color, width=1)
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç
                text_x = x + (cell_width - 20) // 2
                text_y = y + 8
                draw.text((text_x, text_y), str(result), 
                         fill=self.text_color, font=self.text_font)
        
        # –ü–æ–ª–µ–∑–Ω—ã–µ —Ñ–∞–∫—Ç—ã
        facts = [
            "üéØ –ü–û–õ–ï–ó–ù–´–ï –§–ê–ö–¢–´:",
            "‚Ä¢ 2 √ó –ª—é–±–æ–µ —á–∏—Å–ª–æ = —É–¥–≤–∞–∏–≤–∞–Ω–∏–µ",
            "‚Ä¢ 5 √ó —á–µ—Ç–Ω–æ–µ = –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 0", 
            "‚Ä¢ 9 √ó –ª—é–±–æ–µ = —Å—É–º–º–∞ —Ü–∏—Ñ—Ä –∫—Ä–∞—Ç–Ω–∞ 9",
            "‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å —Å –ø—Ä–æ—Å—Ç—ã–º–∏ —á–∏—Å–ª–∞–º–∏"
        ]
        
        y_pos = 300
        for fact in facts:
            color = self.success_color if fact.startswith("üéØ") else self.text_color
            font = self.text_font if fact.startswith("üéØ") else self.small_font
            draw.text((50, y_pos), fact, fill=color, font=font)
            y_pos += 25
        
        filepath = "media/photos/basics_8.jpg"
        img.save(filepath, "JPEG", quality=95)
        return filepath

    def create_division_basics(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ—Å–Ω–æ–≤–∞–º–∏ –¥–µ–ª–µ–Ω–∏—è"""
        img = Image.new('RGB', (self.width, self.height), self.bg_color)
        draw = ImageDraw.Draw(img)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = "–û–°–ù–û–í–´ –î–ï–õ–ï–ù–ò–Ø"
        title_bbox = draw.textbbox((0, 0), title, font=self.title_font)
        title_x = (self.width - (title_bbox[2] - title_bbox[0])) // 2
        draw.text((title_x, 20), title, fill=self.accent_color, font=self.title_font)
        
        # –ö–æ–ª–æ–Ω–∫–∞ "–ù–ê 2"
        draw.text((50, 80), "–ù–ê 2:", fill=self.success_color, font=self.text_font)
        examples_2 = ["8 √∑ 2 = 4", "12 √∑ 2 = 6", "16 √∑ 2 = 8"]
        y_pos = 110
        for example in examples_2:
            draw.rectangle([50, y_pos - 3, 170, y_pos + 22], 
                         outline=(255, 193, 7), width=1, fill=(255, 248, 225))
            draw.text((60, y_pos), example, fill=self.text_color, font=self.small_font)
            y_pos += 30
        
        # –ö–æ–ª–æ–Ω–∫–∞ "–ù–ê 5"
        draw.text((200, 80), "–ù–ê 5:", fill=self.success_color, font=self.text_font)
        examples_5 = ["15 √∑ 5 = 3", "25 √∑ 5 = 5", "35 √∑ 5 = 7"]
        y_pos = 110
        for example in examples_5:
            draw.rectangle([200, y_pos - 3, 320, y_pos + 22], 
                         outline=(255, 193, 7), width=1, fill=(255, 248, 225))
            draw.text((210, y_pos), example, fill=self.text_color, font=self.small_font)
            y_pos += 30
        
        # –ö–æ–ª–æ–Ω–∫–∞ "–ù–ê 10"
        draw.text((350, 80), "–ù–ê 10:", fill=self.success_color, font=self.text_font)
        examples_10 = ["30 √∑ 10 = 3", "50 √∑ 10 = 5", "80 √∑ 10 = 8"]
        y_pos = 110
        for example in examples_10:
            draw.rectangle([350, y_pos - 3, 480, y_pos + 22], 
                         outline=(255, 193, 7), width=1, fill=(255, 248, 225))
            draw.text((360, y_pos), example, fill=self.text_color, font=self.small_font)
            y_pos += 30
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–Ω–∏–∑—É
        draw.text((50, 250), "–°–¢–†–ê–¢–ï–ì–ò–ò –î–ï–õ–ï–ù–ò–Ø:", fill=(255, 193, 7), font=self.text_font)
        
        strategies = [
            "‚Ä¢ –î–µ–ª–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞—Ç–Ω–æ–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ",
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–Ω–∞–∫–æ–º—ã–µ —Ñ–∞–∫—Ç—ã", 
            "‚Ä¢ –†–∞–∑–±–∏–≤–∞–π—Ç–µ –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ —á–∞—Å—Ç–∏",
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ–º"
        ]
        
        y_pos = 280
        for strategy in strategies:
            draw.text((60, y_pos), strategy, fill=self.text_color, font=self.small_font)
            y_pos += 25
        
        # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
        draw.text((50, 390), "–ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –°–û–í–ï–¢–´:", fill=self.success_color, font=self.text_font)
        draw.text((60, 420), "‚Ä¢ –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 2, 5, 10", fill=self.text_color, font=self.small_font)
        draw.text((60, 445), "‚Ä¢ –ò–∑—É—á–∏—Ç–µ —Å–≤—è–∑—å —Å —É–º–Ω–æ–∂–µ–Ω–∏–µ–º", fill=self.text_color, font=self.small_font)
        draw.text((60, 470), "‚Ä¢ –¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ —É—Å—Ç–Ω—ã–π —Å—á–µ—Ç", fill=self.text_color, font=self.small_font)
        
        filepath = "media/photos/basics_9.jpg"
        img.save(filepath, "JPEG", quality=95)
        return filepath

    def create_advanced_techniques(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏"""
        img = Image.new('RGB', (self.width, self.height), self.bg_color)
        draw = ImageDraw.Draw(img)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = "üöÄ –ü–†–û–î–í–ò–ù–£–¢–´–ï –¢–ï–•–ù–ò–ö–ò"
        title_bbox = draw.textbbox((0, 0), title, font=self.title_font)
        title_x = (self.width - (title_bbox[2] - title_bbox[0])) // 2
        draw.text((title_x, 30), title, fill=self.accent_color, font=self.title_font)
        
        # –¢–µ—Ö–Ω–∏–∫–∏
        techniques = [
            "üî• –°–ö–û–†–û–°–¢–ù–´–ï –ú–ï–¢–û–î–´:",
            "",
            "‚ö° –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ 10:",
            "   7 + ? = 10 ‚Üí –¥—É–º–∞–π—Ç–µ '3'",
            "   4 + ? = 10 ‚Üí –¥—É–º–∞–π—Ç–µ '6'",
            "",
            "üí´ –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ 100:", 
            "   68 + ? = 100 ‚Üí –¥—É–º–∞–π—Ç–µ '32'",
            "   45 + ? = 100 ‚Üí –¥—É–º–∞–π—Ç–µ '55'",
            "",
            "üéØ –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ —á–∏—Å–µ–ª:",
            "   23 = 20 + 3",
            "   57 = 50 + 7"
        ]
        
        y_pos = 100
        for technique in techniques:
            if technique.startswith("üî•"):
                color = (220, 53, 69)
                font = self.text_font
            elif technique.startswith("‚ö°") or technique.startswith("üí´") or technique.startswith("üéØ"):
                color = self.success_color
                font = self.text_font
            elif technique == "":
                y_pos += 10
                continue
            else:
                color = self.text_color
                font = self.small_font
            
            draw.text((50, y_pos), technique, fill=color, font=font)
            y_pos += 25
        
        # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
        tips_box_y = 420
        draw.rectangle([40, tips_box_y, 760, tips_box_y + 120], 
                      fill=(240, 248, 255), outline=self.accent_color, width=2)
        
        draw.text((50, tips_box_y + 10), "üí° –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –°–û–í–ï–¢–´:", 
                 fill=self.accent_color, font=self.text_font)
        draw.text((50, tips_box_y + 40), "‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –º–∏–Ω–∏–º—É–º 15 –º–∏–Ω—É—Ç", 
                 fill=self.text_color, font=self.small_font)
        draw.text((50, tips_box_y + 60), "‚Ä¢ –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å", 
                 fill=self.text_color, font=self.small_font)
        draw.text((50, tips_box_y + 80), "‚Ä¢ –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–≤–∏–∂–µ–Ω–∏—è –¥–∞–∂–µ –±–µ–∑ —Å–æ—Ä–æ–±–∞–Ω–∞", 
                 fill=self.text_color, font=self.small_font)
        
        filepath = "media/photos/basics_10.jpg"
        img.save(filepath, "JPEG", quality=95)
        return filepath

def generate_all_basic_images():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –±–∞–∑–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    generator = ImageGenerator()
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs("media/photos", exist_ok=True)
    
    generated_files = []
    
    print("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±—É—á–∞—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    
    # –û—Å–Ω–æ–≤—ã –º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç–∞
    file1 = generator.create_soroban_basics()
    generated_files.append(file1)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ: {file1}")
    
    # –†–∞–∑–≤–∏—Ç–∏–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏
    file2 = generator.create_concentration_techniques() 
    generated_files.append(file2)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ: {file2}")
    
    # –ü—Ä–∞–≤–∏–ª–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Å—á–µ—Ç–∞
    file3 = generator.create_speed_rules()
    generated_files.append(file3)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ: {file3}")
    
    # –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–∞–º—è—Ç–∏
    file4 = generator.create_memory_training()
    generated_files.append(file4)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ: {file4}")
    
    # –ü—Ä–∏–º–µ—Ä—ã —Å–ª–æ–∂–µ–Ω–∏—è
    file5 = generator.create_addition_examples()
    generated_files.append(file5)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ: {file5}")
    
    # –ü—Ä–∏–º–µ—Ä—ã –≤—ã—á–∏—Ç–∞–Ω–∏—è
    file6 = generator.create_subtraction_examples()
    generated_files.append(file6)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ: {file6}")
    
    # –ü–æ–∑–∏—Ü–∏—è —Ä—É–∫ (–ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–µ–π)
    file7 = generator.create_hand_position()
    generated_files.append(file7)
    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {file7}")
    
    # –¢–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è
    file8 = generator.create_multiplication_table()
    generated_files.append(file8)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ: {file8}")
    
    # –û—Å–Ω–æ–≤—ã –¥–µ–ª–µ–Ω–∏—è
    file9 = generator.create_division_basics()
    generated_files.append(file9)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ: {file9}")
    
    # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏
    file10 = generator.create_advanced_techniques()
    generated_files.append(file10)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ: {file10}")
    
    print(f"\nüéâ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {len(generated_files)} –æ–±—É—á–∞—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!")
    return generated_files

if __name__ == "__main__":
    generate_all_basic_images() 