import random
from typing import Tuple, List

class MathProblemGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –¥–ª—è –º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∏"""
    
    def __init__(self):
        self.level_configs = {
            1: {"type": "addition", "range": (1, 10), "terms": 2},
            2: {"type": "subtraction", "range": (1, 10), "terms": 2},
            3: {"type": "addition", "range": (10, 50), "terms": 2},
            4: {"type": "subtraction", "range": (10, 50), "terms": 2},
            5: {"type": "addition", "range": (1, 20), "terms": 3},
            6: {"type": "mixed", "range": (10, 30), "terms": 2},
            7: {"type": "multiplication", "range": (2, 12), "terms": 2},
            8: {"type": "addition", "range": (50, 100), "terms": 2},
            9: {"type": "mixed_advanced", "range": (10, 50), "terms": 3},
            10: {"type": "challenge", "range": (10, 100), "terms": 4}
        }
    
    def generate_problem(self, level: int) -> Tuple[str, int]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (1-10)
            
        Returns:
            Tuple[str, int]: (—Ç–µ–∫—Å—Ç_–∑–∞–¥–∞—á–∏, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π_–æ—Ç–≤–µ—Ç)
        """
        if level not in self.level_configs:
            level = 1
        
        config = self.level_configs[level]
        problem_type = config["type"]
        num_range = config["range"]
        terms_count = config["terms"]
        
        if problem_type == "addition":
            return self._generate_addition(num_range, terms_count)
        elif problem_type == "subtraction":
            return self._generate_subtraction(num_range)
        elif problem_type == "multiplication":
            return self._generate_multiplication(num_range)
        elif problem_type == "mixed":
            return self._generate_mixed(num_range)
        elif problem_type == "mixed_advanced":
            return self._generate_mixed_advanced(num_range, terms_count)
        elif problem_type == "challenge":
            return self._generate_challenge(num_range, terms_count)
        else:
            return self._generate_addition(num_range, terms_count)
    
    def _generate_addition(self, num_range: Tuple[int, int], terms: int) -> Tuple[str, int]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –Ω–∞ —Å–ª–æ–∂–µ–Ω–∏–µ"""
        numbers = [random.randint(*num_range) for _ in range(terms)]
        problem = " + ".join(map(str, numbers))
        answer = sum(numbers)
        return f"{problem} = ?", answer
    
    def _generate_subtraction(self, num_range: Tuple[int, int]) -> Tuple[str, int]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –Ω–∞ –≤—ã—á–∏—Ç–∞–Ω–∏–µ"""
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π
        a = random.randint(num_range[0], num_range[1])
        b = random.randint(num_range[0], min(a, num_range[1]))
        problem = f"{a} - {b}"
        answer = a - b
        return f"{problem} = ?", answer
    
    def _generate_multiplication(self, num_range: Tuple[int, int]) -> Tuple[str, int]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –Ω–∞ —É–º–Ω–æ–∂–µ–Ω–∏–µ"""
        a = random.randint(*num_range)
        b = random.randint(2, 9)  # –¢–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è
        problem = f"{a} √ó {b}"
        answer = a * b
        return f"{problem} = ?", answer
    
    def _generate_mixed(self, num_range: Tuple[int, int]) -> Tuple[str, int]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (—Å–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã—á–∏—Ç–∞–Ω–∏–µ)"""
        operation = random.choice(["+", "-"])
        
        if operation == "+":
            return self._generate_addition(num_range, 2)
        else:
            return self._generate_subtraction(num_range)
    
    def _generate_mixed_advanced(self, num_range: Tuple[int, int], terms: int) -> Tuple[str, int]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Å–º–µ—à–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        numbers = [random.randint(*num_range) for _ in range(terms)]
        operations = [random.choice(["+", "-"]) for _ in range(terms - 1)]
        
        # –°—Ç—Ä–æ–∏–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        expression_parts = [str(numbers[0])]
        for i, op in enumerate(operations):
            expression_parts.append(f" {op} {numbers[i + 1]}")
        
        problem = "".join(expression_parts)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–≤–µ—Ç
        answer = numbers[0]
        for i, op in enumerate(operations):
            if op == "+":
                answer += numbers[i + 1]
            else:
                answer -= numbers[i + 1]
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏
        if answer < 0:
            # –ü–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ–º —á–∏—Å–ª–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            numbers.sort(reverse=True)
            problem = f"{numbers[0]} - {numbers[1]}"
            answer = numbers[0] - numbers[1]
        
        return f"{problem} = ?", answer
    
    def _generate_challenge(self, num_range: Tuple[int, int], terms: int) -> Tuple[str, int]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
        # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
        challenge_type = random.choice(["multi_add", "multi_sub", "mixed_operations"])
        
        if challenge_type == "multi_add":
            numbers = [random.randint(*num_range) for _ in range(terms)]
            problem = " + ".join(map(str, numbers))
            answer = sum(numbers)
        
        elif challenge_type == "multi_sub":
            # –ë–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ–Ω—å—à–∏—Ö
            big_num = random.randint(num_range[1] - 20, num_range[1])
            small_nums = [random.randint(5, 15) for _ in range(terms - 1)]
            
            problem = str(big_num)
            answer = big_num
            for num in small_nums:
                problem += f" - {num}"
                answer -= num
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª—Å—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º
            if answer < 0:
                return self._generate_addition(num_range, terms)
        
        else:  # mixed_operations
            # –°–º–µ—à–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —É–º–Ω–æ–∂–µ–Ω–∏–µ–º
            a = random.randint(2, 10)
            b = random.randint(2, 9)
            c = random.randint(5, 20)
            
            operation = random.choice(["+", "-"])
            problem = f"{a} √ó {b} {operation} {c}"
            
            if operation == "+":
                answer = a * b + c
            else:
                answer = a * b - c
        
        return f"{problem} = ?", answer
    
    def get_level_description(self, level: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è"""
        descriptions = {
            1: "üéØ –°–ª–æ–∂–µ–Ω–∏–µ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 10",
            2: "‚ûñ –í—ã—á–∏—Ç–∞–Ω–∏–µ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 10", 
            3: "‚ûï –°–ª–æ–∂–µ–Ω–∏–µ —á–∏—Å–µ–ª –æ—Ç 10 –¥–æ 50",
            4: "‚ûñ –í—ã—á–∏—Ç–∞–Ω–∏–µ —á–∏—Å–µ–ª –æ—Ç 10 –¥–æ 50",
            5: "üî¢ –°–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä—ë—Ö —á–∏—Å–µ–ª",
            6: "üîÑ –°–º–µ—à–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
            7: "‚úñÔ∏è –£–º–Ω–æ–∂–µ–Ω–∏–µ (—Ç–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è)",
            8: "üìà –ë–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞ (–¥–æ 100)",
            9: "üß† –°–ª–æ–∂–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è",
            10: "üëë –ú–∞—Å—Ç–µ—Ä-—É—Ä–æ–≤–µ–Ω—å"
        }
        return descriptions.get(level, "üìö –û–±—ã—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å")
    
    def get_difficulty_emoji(self, level: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è"""
        if level <= 2:
            return "üü¢"  # –õ–µ–≥–∫–æ
        elif level <= 5:
            return "üü°"  # –°—Ä–µ–¥–Ω–µ
        elif level <= 8:
            return "üü†"  # –°–ª–æ–∂–Ω–æ
        else:
            return "üî¥"  # –û—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
math_generator = MathProblemGenerator() 