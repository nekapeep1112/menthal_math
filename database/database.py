from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker
from sqlalchemy.orm import selectinload
from sqlalchemy import select, update, delete
from database.models import Base, User, LearningSession, Problem, Achievement, UserAchievement, UserSettings
from config import Config
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

class Database:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.engine = create_async_engine(
            Config.DATABASE_URL,
            echo=Config.DEBUG,
            future=True
        )
        self.async_session = async_sessionmaker(
            self.engine,
            class_=AsyncSession,
            expire_on_commit=False
        )
    
    async def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        async with self.engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        await self.create_default_achievements()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async def create_default_achievements(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        achievements = [
            ("–ù–æ–≤–∏—á–æ–∫", "–†–µ—à–∏—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É", "üéØ", "level", 1),
            ("–£—á–µ–Ω–∏–∫", "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 3 —É—Ä–æ–≤–Ω—è", "üìö", "level", 3),
            ("–≠–∫—Å–ø–µ—Ä—Ç", "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 5 —É—Ä–æ–≤–Ω—è", "üß†", "level", 5),
            ("–ú–∞—Å—Ç–µ—Ä", "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 7 —É—Ä–æ–≤–Ω—è", "üèÜ", "level", 7),
            ("–ì–µ–Ω–∏–π", "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 10 —É—Ä–æ–≤–Ω—è", "üëë", "level", 10),
            ("–°–∫–æ—Ä–æ—Å—Ç—å", "–†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É –∑–∞ 5 —Å–µ–∫—É–Ω–¥", "‚ö°", "speed", 5),
            ("–¢–æ—á–Ω–æ—Å—Ç—å", "–†–µ—à–∏—Ç–µ 10 –∑–∞–¥–∞—á –ø–æ–¥—Ä—è–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ", "üéØ", "streak", 10),
            ("–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å", "–†–µ—à–∏—Ç–µ 50 –∑–∞–¥–∞—á", "üí™", "total", 50),
        ]
        
        async with self.async_session() as session:
            for name, desc, icon, cond_type, cond_value in achievements:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
                result = await session.execute(
                    select(Achievement).where(Achievement.name == name)
                )
                if not result.scalar_one_or_none():
                    achievement = Achievement(
                        name=name,
                        description=desc,
                        icon=icon,
                        condition_type=cond_type,
                        condition_value=cond_value
                    )
                    session.add(achievement)
            await session.commit()
    
    async def get_or_create_user(self, telegram_id: int, username: str = None, 
                                first_name: str = None, last_name: str = None) -> User:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.async_session() as session:
            result = await session.execute(
                select(User).where(User.telegram_id == telegram_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                user = User(
                    telegram_id=telegram_id,
                    username=username,
                    first_name=first_name,
                    last_name=last_name
                )
                session.add(user)
                await session.commit()
                await session.refresh(user)
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}")
            
            return user
    
    async def get_user_stats(self, telegram_id: int) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.async_session() as session:
            user = await session.execute(
                select(User).options(
                    selectinload(User.sessions),
                    selectinload(User.achievements)
                ).where(User.telegram_id == telegram_id)
            )
            user = user.scalar_one_or_none()
            
            if not user:
                return {}
            
            total_sessions = len(user.sessions)
            completed_sessions = len([s for s in user.sessions if s.completed])
            total_problems = sum(s.problems_solved for s in user.sessions)
            correct_answers = sum(s.correct_answers for s in user.sessions)
            accuracy = (correct_answers / total_problems * 100) if total_problems > 0 else 0
            
            return {
                "level": user.current_level,
                "total_score": user.total_score,
                "total_sessions": total_sessions,
                "completed_sessions": completed_sessions,
                "total_problems": total_problems,
                "correct_answers": correct_answers,
                "accuracy": round(accuracy, 1),
                "achievements_count": len(user.achievements)
            }
    
    async def save_learning_session(self, telegram_id: int, level: int, 
                                  problems_data: list, total_time: float) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è"""
        async with self.async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_result = await session.execute(
                select(User).where(User.telegram_id == telegram_id)
            )
            user = user_result.scalar_one_or_none()
            
            if not user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            problems_solved = len(problems_data)
            correct_answers = len([p for p in problems_data if p['is_correct']])
            accuracy = (correct_answers / problems_solved * 100) if problems_solved > 0 else 0
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è
            from datetime import datetime
            learning_session = LearningSession(
                user_id=user.id,
                level=level,
                problems_solved=problems_solved,
                correct_answers=correct_answers,
                total_time=total_time,
                completed=True,
                finished_at=datetime.utcnow()
            )
            session.add(learning_session)
            await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID —Å–µ—Å—Å–∏–∏
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É
            for i, problem_data in enumerate(problems_data):
                problem_text = problem_data.get('problem_text', f"–ó–∞–¥–∞—á–∞ {i+1}")
                problem = Problem(
                    session_id=learning_session.id,
                    level=level,
                    problem_text=problem_text,
                    correct_answer=problem_data['correct_answer'],
                    user_answer=problem_data['user_answer'],
                    is_correct=problem_data['is_correct'],
                    time_taken=problem_data['time_taken'],
                    answered_at=datetime.utcnow()
                )
                session.add(problem)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            score_gained = correct_answers * 10  # 10 –æ—á–∫–æ–≤ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            if accuracy >= 80:  # –ë–æ–Ω—É—Å –∑–∞ —Ö–æ—Ä–æ—à—É—é —Ç–æ—á–Ω–æ—Å—Ç—å
                score_gained += problems_solved * 5
            
            user.total_score += score_gained
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è (80%+ —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞)
            if accuracy >= 80 and level == user.current_level:
                new_level = min(level + 1, Config.MAX_LEVEL)
                if new_level > user.current_level:
                    user.current_level = new_level
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –ø–æ–≤—ã—Å–∏–ª—Å—è –¥–æ —É—Ä–æ–≤–Ω—è {user.current_level}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            user.last_activity = datetime.utcnow()
            
            await session.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            await self.check_achievements(telegram_id)
            
            logger.info(f"–°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id}, —É—Ä–æ–≤–µ–Ω—å {level}, "
                       f"—Ç–æ—á–Ω–æ—Å—Ç—å {accuracy:.1f}%, –æ—á–∫–æ–≤ +{score_gained}")
            return True
    
    async def check_achievements(self, telegram_id: int):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        async with self.async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Å—Å–∏—è–º–∏ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
            user_result = await session.execute(
                select(User).options(
                    selectinload(User.sessions).selectinload(LearningSession.problems),
                    selectinload(User.achievements)
                ).where(User.telegram_id == telegram_id)
            )
            user = user_result.scalar_one_or_none()
            
            if not user:
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            achievements_result = await session.execute(select(Achievement))
            all_achievements = achievements_result.scalars().all()
            
            # –°–ø–∏—Å–æ–∫ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            earned_achievement_ids = [ua.achievement_id for ua in user.achievements]
            
            new_achievements = []
            
            for achievement in all_achievements:
                if achievement.id in earned_achievement_ids:
                    continue  # –£–∂–µ –ø–æ–ª—É—á–µ–Ω–æ
                
                earned = False
                
                if achievement.condition_type == "level":
                    earned = user.current_level >= achievement.condition_value
                
                elif achievement.condition_type == "total":
                    total_problems = sum(s.problems_solved for s in user.sessions)
                    earned = total_problems >= achievement.condition_value
                
                elif achievement.condition_type == "speed":
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–¥–∞—á–∏ —Ä–µ—à–µ–Ω–Ω—ã–µ –±—ã—Å—Ç—Ä–µ–µ —á–µ–º condition_value —Å–µ–∫—É–Ω–¥
                    earned = False
                    for sess in user.sessions:
                        if sess.problems:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ problems –∑–∞–≥—Ä—É–∂–µ–Ω—ã
                            for problem in sess.problems:
                                if problem.time_taken <= achievement.condition_value and problem.is_correct:
                                    earned = True
                                    break
                        if earned:
                            break
                
                elif achievement.condition_type == "streak":
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º streak –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                    max_streak = 0
                    current_streak = 0
                    for sess in user.sessions:
                        if sess.problems:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ problems –∑–∞–≥—Ä—É–∂–µ–Ω—ã
                            for problem in sess.problems:
                                if problem.is_correct:
                                    current_streak += 1
                                    max_streak = max(max_streak, current_streak)
                                else:
                                    current_streak = 0
                    earned = max_streak >= achievement.condition_value
                
                if earned:
                    # –í—ã–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
                    user_achievement = UserAchievement(
                        user_id=user.id,
                        achievement_id=achievement.id
                    )
                    session.add(user_achievement)
                    new_achievements.append(achievement)
            
            if new_achievements:
                await session.commit()
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –ø–æ–ª—É—á–∏–ª {len(new_achievements)} –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")
            
            return new_achievements
    
    async def get_user_settings(self, telegram_id: int) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.async_session() as session:
            user_result = await session.execute(
                select(User).options(selectinload(User.settings)).where(User.telegram_id == telegram_id)
            )
            user = user_result.scalar_one_or_none()
            
            if not user:
                return {
                    "time_per_problem": Config.DEFAULT_TIME_PER_PROBLEM,
                    "problems_per_session": Config.DEFAULT_PROBLEMS_PER_SESSION,
                    "sound_enabled": True,
                    "dark_theme": False
                }
            
            if not user.settings:
                # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                settings = UserSettings(
                    user_id=user.id,
                    time_per_problem=Config.DEFAULT_TIME_PER_PROBLEM,
                    problems_per_session=Config.DEFAULT_PROBLEMS_PER_SESSION
                )
                session.add(settings)
                await session.commit()
                await session.refresh(settings)
                
                return {
                    "time_per_problem": settings.time_per_problem,
                    "problems_per_session": settings.problems_per_session,
                    "sound_enabled": settings.sound_enabled,
                    "dark_theme": settings.dark_theme
                }
            
            return {
                "time_per_problem": user.settings.time_per_problem,
                "problems_per_session": user.settings.problems_per_session,
                "sound_enabled": user.settings.sound_enabled,
                "dark_theme": user.settings.dark_theme
            }

    async def update_user_setting(self, telegram_id: int, setting_name: str, value) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.async_session() as session:
            user_result = await session.execute(
                select(User).options(selectinload(User.settings)).where(User.telegram_id == telegram_id)
            )
            user = user_result.scalar_one_or_none()
            
            if not user:
                return False
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            if not user.settings:
                settings = UserSettings(
                    user_id=user.id,
                    time_per_problem=Config.DEFAULT_TIME_PER_PROBLEM,
                    problems_per_session=Config.DEFAULT_PROBLEMS_PER_SESSION
                )
                session.add(settings)
                await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
                user.settings = settings
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            if hasattr(user.settings, setting_name):
                setattr(user.settings, setting_name, value)
                user.settings.updated_at = datetime.utcnow()
                await session.commit()
                logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ {setting_name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {value}")
                return True
            
            return False

    async def get_leaderboard(self, limit: int = 10) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—á–∫–∞–º"""
        async with self.async_session() as session:
            result = await session.execute(
                select(User)
                .where(User.total_score > 0)
                .order_by(User.total_score.desc(), User.current_level.desc())
                .limit(limit)
            )
            users = result.scalars().all()
            
            leaderboard = []
            for i, user in enumerate(users, 1):
                leaderboard.append({
                    'position': i,
                    'name': user.first_name or user.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id}",
                    'score': user.total_score,
                    'level': user.current_level,
                    'telegram_id': user.telegram_id
                })
            
            return leaderboard

    async def get_user_rank(self, telegram_id: int) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ"""
        async with self.async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_result = await session.execute(
                select(User).where(User.telegram_id == telegram_id)
            )
            user = user_result.scalar_one_or_none()
            
            if not user:
                return {'position': None, 'total_users': 0}
            
            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–æ–ª—å—à–∏–º —Å—á–µ—Ç–æ–º
            higher_score_result = await session.execute(
                select(User.id).where(
                    (User.total_score > user.total_score) | 
                    ((User.total_score == user.total_score) & (User.current_level > user.current_level))
                )
            )
            higher_count = len(higher_score_result.scalars().all())
            
            # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—á–∫–∞–º–∏
            total_result = await session.execute(
                select(User.id).where(User.total_score > 0)
            )
            total_users = len(total_result.scalars().all())
            
            return {
                'position': higher_count + 1,
                'total_users': total_users,
                'score': user.total_score,
                'level': user.current_level
            }

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        await self.engine.dispose()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database() 