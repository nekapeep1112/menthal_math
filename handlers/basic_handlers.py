from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select

from database.database import db
from keyboards.main_keyboard import get_main_menu, get_level_selection, get_photo_materials_keyboard
from utils.formatters import format_welcome_message, format_help_message, format_user_stats, get_random_greeting
from utils.math_generator import math_generator
import logging

router = Router()
logger = logging.getLogger(__name__)

class SettingsStates(StatesGroup):
    waiting_time_input = State()
    waiting_problems_input = State()

@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    welcome_text = get_random_greeting(message.from_user.first_name or "–¥—Ä—É–≥")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
    from aiogram.types import FSInputFile
    import os
    
    greet_photo = FSInputFile(os.path.join("media", "photos", "greet.png"))
    
    await message.answer_photo(
        photo=greet_photo,
        caption=welcome_text,
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

@router.message(Command("help"))
@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏"""
    help_text = format_help_message()
    
    await message.answer(
        help_text,
        parse_mode="HTML"
    )

@router.message(F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    stats = await db.get_user_stats(message.from_user.id)
    stats_text = format_user_stats(stats)
    
    await message.answer(
        stats_text,
        parse_mode="HTML"
    )

@router.message(F.text == "üßÆ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
async def start_learning(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = await db.get_or_create_user(telegram_id=message.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    stats = await db.get_user_stats(message.from_user.id)
    current_level = stats.get("level", 1) if stats else 1
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è
    keyboard = get_level_selection(current_level)
    
    await message.answer(
        "üìö <b>–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:</b>\n\n"
        "üü¢ –õ–µ–≥–∫–∏–π ‚Ä¢ üü° –°—Ä–µ–¥–Ω–∏–π ‚Ä¢ üü† –°–ª–æ–∂–Ω—ã–π ‚Ä¢ üî¥ –≠–∫—Å–ø–µ—Ä—Ç\n\n"
        "<i>–í—ã–±–µ—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π!</i>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.message(F.text == "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
async def achievements_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with db.async_session() as session:
        from sqlalchemy import select
        from sqlalchemy.orm import selectinload
        from database.models import User, UserAchievement, Achievement
        
        user_result = await session.execute(
            select(User).options(
                selectinload(User.achievements).selectinload(UserAchievement.achievement)
            ).where(User.telegram_id == message.from_user.id)
        )
        user = user_result.scalar_one_or_none()
        
        if user and user.achievements:
            achievements_data = []
            for user_achievement in user.achievements:
                achievements_data.append({
                    'name': user_achievement.achievement.name,
                    'description': user_achievement.achievement.description,
                    'icon': user_achievement.achievement.icon,
                    'earned_at': user_achievement.earned_at
                })
            
            from utils.formatters import format_achievements_list
            text = format_achievements_list(achievements_data)
        else:
            text = "üèÜ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>\n\n–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.\n–†–µ—à–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã! üí™"
    
    await message.answer(text, parse_mode="HTML")

@router.message(F.text == "üèÖ –†–µ–π—Ç–∏–Ω–≥")
async def leaderboard_command(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏ –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    leaderboard = await db.get_leaderboard(limit=10)
    user_rank = await db.get_user_rank(user_id)
    
    from utils.formatters import format_leaderboard
    leaderboard_text = format_leaderboard(leaderboard, user_rank)
    
    await message.answer(leaderboard_text, parse_mode="HTML")

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    from keyboards.main_keyboard import get_settings_keyboard
    
    await message.answer(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –ø–æ–¥ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:",
        reply_markup=get_settings_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.delete()
    
    await callback.message.answer(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )
    
    await callback.answer()

@router.callback_query(F.data == "level_locked")
async def level_locked(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
    await callback.answer(
        "üîí –≠—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\n–ü—Ä–æ–π–¥–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É—Ä–æ–≤–Ω–∏, —á—Ç–æ–±—ã –µ–≥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.",
        show_alert=True
    )

@router.callback_query(F.data.startswith("level_"))
async def select_level(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è"""
    level_str = callback.data.split("_")[1]
    
    try:
        level = int(level_str)
    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    description = math_generator.get_level_description(level)
    difficulty = math_generator.get_difficulty_emoji(level)
    
    from utils.formatters import format_level_info
    level_info = format_level_info(level, description, difficulty)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(selected_level=level)
    
    from keyboards.main_keyboard import get_confirmation_keyboard
    
    await callback.message.edit_text(
        level_info + "\n<b>–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?</b>",
        reply_markup=get_confirmation_keyboard("start_learning"),
        parse_mode="HTML"
    )
    
    await callback.answer()

@router.callback_query(F.data == "confirm_start_learning")
async def confirm_start_learning(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è"""
    data = await state.get_data()
    level = data.get("selected_level", 1)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—É—á–µ–Ω–∏—é
    from handlers.learning_handlers import start_learning_session
    await start_learning_session(callback, state, level)

@router.callback_query(F.data == "cancel")
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    await callback.message.delete()
    await state.clear()
    
    await callback.message.answer(
        "‚ùå <b>–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )
    
    await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@router.callback_query(F.data == "setting_time")
async def setting_time(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∑–∞–¥–∞—á—É"""
    user_settings = await db.get_user_settings(callback.from_user.id)
    current_time = user_settings.get("time_per_problem", 30)
    
    from config import Config
    
    await callback.message.edit_text(
        f"‚è±Ô∏è <b>–í—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞—á—É</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: <b>{current_time} —Å–µ–∫—É–Ω–¥</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞—á—É –æ—Ç {Config.MIN_TIME_PER_PROBLEM} –¥–æ {Config.MAX_TIME_PER_PROBLEM} —Å–µ–∫—É–Ω–¥:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")
        ]])
    )
    
    await state.set_state(SettingsStates.waiting_time_input)
    await callback.answer()

@router.callback_query(F.data == "setting_problems")
async def setting_problems(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á"""
    user_settings = await db.get_user_settings(callback.from_user.id)
    current_problems = user_settings.get("problems_per_session", 5)
    
    from config import Config
    
    await callback.message.edit_text(
        f"üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –≤ —Å–µ—Å—Å–∏–∏</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{current_problems} –∑–∞–¥–∞—á</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –æ—Ç {Config.MIN_PROBLEMS_PER_SESSION} –¥–æ {Config.MAX_PROBLEMS_PER_SESSION}:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")
        ]])
    )
    
    await state.set_state(SettingsStates.waiting_problems_input)
    await callback.answer()

@router.callback_query(F.data == "setting_sounds")
async def setting_sounds(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–≤—É–∫–æ–≤"""
    await callback.answer(
        "üîä –≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö!",
        show_alert=True
    )

@router.callback_query(F.data == "setting_theme")
async def setting_theme(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã"""
    await callback.answer(
        "üåô –≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö!",
        show_alert=True
    )

@router.callback_query(F.data == "setting_difficulty")
async def setting_difficulty(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    await callback.answer(
        "üìà –≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö!",
        show_alert=True
    )

@router.callback_query(F.data == "reset_progress")
async def reset_progress(callback: CallbackQuery):
    """–°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    from keyboards.main_keyboard import get_confirmation_keyboard
    
    await callback.message.edit_text(
        "üîÑ <b>–°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</b>\n\n"
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç:\n"
        "‚Ä¢ –í–µ—Å—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É—Ä–æ–≤–Ω—è–º\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á\n"
        "‚Ä¢ –í—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=get_confirmation_keyboard("reset_progress"),
        parse_mode="HTML"
    )
    
    await callback.answer()

@router.callback_query(F.data == "confirm_reset_progress")
async def confirm_reset_progress(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    user_id = callback.from_user.id
    
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with db.async_session() as session:
            from sqlalchemy import update, delete
            from database.models import User, LearningSession, Problem, UserAchievement
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = user_result.scalar_one_or_none()
            
            if user:
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                await session.execute(
                    delete(Problem).where(Problem.session_id.in_(
                        select(LearningSession.id).where(LearningSession.user_id == user.id)
                    ))
                )
                await session.execute(
                    delete(LearningSession).where(LearningSession.user_id == user.id)
                )
                await session.execute(
                    delete(UserAchievement).where(UserAchievement.user_id == user.id)
                )
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await session.execute(
                    update(User).where(User.id == user.id).values(
                        current_level=1,
                        total_score=0
                    )
                )
                
                await session.commit()
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.clear()
                
                await callback.message.edit_text(
                    "‚úÖ <b>–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω!</b>\n\n"
                    "–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞!",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
                    ]]),
                    parse_mode="HTML"
                )
                
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–±—Ä–æ—Å–∏–ª —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
                
            else:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", show_alert=True)
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@router.message(SettingsStates.waiting_time_input)
async def process_time_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∑–∞–¥–∞—á—É"""
    try:
        new_time = int(message.text.strip())
        
        from config import Config
        
        if not (Config.MIN_TIME_PER_PROBLEM <= new_time <= Config.MAX_TIME_PER_PROBLEM):
            await message.answer(
                f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è!</b>\n\n"
                f"–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç {Config.MIN_TIME_PER_PROBLEM} –¥–æ {Config.MAX_TIME_PER_PROBLEM} —Å–µ–∫—É–Ω–¥.",
                parse_mode="HTML"
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        success = await db.update_user_setting(message.from_user.id, "time_per_problem", new_time)
        
        if success:
            await message.answer(
                f"‚úÖ <b>–í—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
                f"–ù–æ–≤–æ–µ –≤—Ä–µ–º—è: <b>{new_time} —Å–µ–∫—É–Ω–¥</b>",
                parse_mode="HTML"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        await state.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        from keyboards.main_keyboard import get_settings_keyboard
        await message.answer(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –ø–æ–¥ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:",
            reply_markup=get_settings_keyboard(),
            parse_mode="HTML"
        )
        
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥)",
            parse_mode="HTML"
        )

@router.message(SettingsStates.waiting_problems_input)
async def process_problems_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á"""
    try:
        new_problems = int(message.text.strip())
        
        from config import Config
        
        if not (Config.MIN_PROBLEMS_PER_SESSION <= new_problems <= Config.MAX_PROBLEMS_PER_SESSION):
            await message.answer(
                f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!</b>\n\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç {Config.MIN_PROBLEMS_PER_SESSION} –¥–æ {Config.MAX_PROBLEMS_PER_SESSION}.",
                parse_mode="HTML"
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        success = await db.update_user_setting(message.from_user.id, "problems_per_session", new_problems)
        
        if success:
            await message.answer(
                f"‚úÖ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
                f"–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{new_problems} –∑–∞–¥–∞—á</b>",
                parse_mode="HTML"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        await state.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        from keyboards.main_keyboard import get_settings_keyboard
        await message.answer(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –ø–æ–¥ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:",
            reply_markup=get_settings_keyboard(),
            parse_mode="HTML"
        )
        
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á)",
            parse_mode="HTML"
        )

@router.callback_query(F.data == "back_to_settings")
async def back_to_settings(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
    await state.clear()
    
    from keyboards.main_keyboard import get_settings_keyboard
    
    await callback.message.edit_text(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –ø–æ–¥ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:",
        reply_markup=get_settings_keyboard(),
        parse_mode="HTML"
    )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞-–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤

@router.message(F.text == "üì∏ –£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def photo_materials_menu(message: Message):
    """–ú–µ–Ω—é —É—á–µ–±–Ω—ã—Ö —Ñ–æ—Ç–æ-–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    await message.answer(
        "üì∏ <b>–£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—É—á–∞—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:\n\n"
        "üìö –ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å —Å—Ö–µ–º—ã, —Ç–∞–±–ª–∏—Ü—ã, –ø—Ä–∞–≤–∏–ª–∞ –∏ –ø—Ä–∏–º–µ—Ä—ã "
        "–¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∏",
        reply_markup=get_photo_materials_keyboard(),
        parse_mode="HTML"
    )

@router.message(F.text == "üé¨ –í–∏–¥–µ–æ-—É—Ä–æ–∫–∏")
async def video_materials_menu(message: Message):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤–∏–¥–µ–æ—É—Ä–æ–∫–æ–≤"""
    from keyboards.main_keyboard import get_video_lessons_keyboard
    
    await message.answer(
        "üé¨ <b>–í–∏–¥–µ–æ-—É—Ä–æ–∫–∏ –ø–æ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–µ</b>\n\n"
        "üßÆ <b>–°—á–µ—Ç—ã –ê–±–∞–∫—É—Å (–°–æ—Ä–æ–±–∞–Ω)</b> ‚Äî —ç—Ç–æ –¥—Ä–µ–≤–Ω–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π, "
        "–∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–≤–∏—Ç—å –Ω–∞–≤—ã–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ —Å—á–µ—Ç–∞ –≤ —É–º–µ.\n\n"
        "‚ú® <b>–ß—Ç–æ –¥–∞–µ—Ç –∏–∑—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –∞–±–∞–∫—É—Å–æ–º:</b>\n"
        "‚Ä¢ üß† –†–∞–∑–≤–∏—Ç–∏–µ –æ–±–æ–∏—Ö –ø–æ–ª—É—à–∞—Ä–∏–π –º–æ–∑–≥–∞\n"
        "‚Ä¢ ‚ö° –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π\n"
        "‚Ä¢ üéØ –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –≤–Ω–∏–º–∞–Ω–∏—è\n"
        "‚Ä¢ üí° –†–∞–∑–≤–∏—Ç–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è\n"
        "‚Ä¢ üìà –ü–æ–≤—ã—à–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ\n\n"
        "üé• <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:</b>\n"
        "–ö–∞–∂–¥—ã–π —É—Ä–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—à–∞–≥–æ–≤—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è "
        "–¥–ª—è –æ—Å–≤–æ–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∏.",
        reply_markup=get_video_lessons_keyboard(),
        parse_mode="HTML"
    )

@router.message(F.text == "üìã –®–ø–∞—Ä–≥–∞–ª–∫–∏")
async def cheat_sheets_menu(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö —à–ø–∞—Ä–≥–∞–ª–æ–∫ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    from aiogram.types import InputMediaPhoto, FSInputFile
    import os
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è basics
    media_group = []
    
    for i in range(1, 11):  # basics_1.jpg –¥–æ basics_10.jpg
        image_path = f"media/photos/basics_{i}.jpg"
        if os.path.exists(image_path):
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            caption = None
            if i == 1:
                caption = (
                    "üìã <b>–®–ø–∞—Ä–≥–∞–ª–∫–∏ –ø–æ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–µ</b>\n\n"
                    "üßÆ –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –æ–±—É—á–∞—é—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:\n"
                    "‚Ä¢ –û—Å–Ω–æ–≤—ã –º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç–∞\n"
                    "‚Ä¢ –¢–µ—Ö–Ω–∏–∫–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏\n"
                    "‚Ä¢ –ü—Ä–∞–≤–∏–ª–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Å—á–µ—Ç–∞\n"
                    "‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–∞–º—è—Ç–∏\n"
                    "‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π\n"
                    "‚Ä¢ –ü–æ–∑–∏—Ü–∏—è —Ä—É–∫\n"
                    "‚Ä¢ –¢–∞–±–ª–∏—Ü—ã –∏ —Å—Ö–µ–º—ã\n"
                    "‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏\n\n"
                    "üí° –°–æ—Ö—Ä–∞–Ω–∏ —ç—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!"
                )
            
            photo = InputMediaPhoto(
                media=FSInputFile(image_path),
                caption=caption,
                parse_mode="HTML" if caption else None
            )
            media_group.append(photo)
    
    if media_group:
        try:
            await message.answer_media_group(media_group)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —à–ø–∞—Ä–≥–∞–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —à–ø–∞—Ä–≥–∞–ª–æ–∫: {e}")
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–ø–∞—Ä–≥–∞–ª–æ–∫</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML"
            )
    else:
        await message.answer(
            "‚ùå <b>–®–ø–∞—Ä–≥–∞–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
            "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.",
            parse_mode="HTML"
        )

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@router.callback_query(F.data == "back_to_photo_materials")
async def back_to_photo_materials(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é —Ñ–æ—Ç–æ-–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    await callback.message.edit_text(
        "üì∏ <b>–£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–µ</b>\n\n"
        "üìñ <b>–ü–æ—à–∞–≥–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ</b> - –ø–æ–ª–Ω—ã–π –∫—É—Ä—Å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏\n\n"
        "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:",
        reply_markup=get_photo_materials_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_main")
async def back_to_main_callback(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback"""
    await callback.message.delete()
    
    await callback.message.answer(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )
    
    await callback.answer()

@router.callback_query(F.data == "start_practice")
async def start_practice_callback(callback: CallbackQuery):
    """–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞"""
    await callback.message.edit_text(
        "üéØ <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
        reply_markup=get_level_selection(),
        parse_mode="HTML"
    )
    await callback.answer("üöÄ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∏–¥–µ–æ—É—Ä–æ–∫–æ–≤
@router.callback_query(F.data.startswith("video_lesson_"))
async def send_video_lesson(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ—É—Ä–æ–∫–∞"""
    from aiogram.types import FSInputFile
    import os
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å timeout
        await callback.answer("üìπ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–µ–æ—É—Ä–æ–∫...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞
        lesson_number = callback.data.split("_")[-1]
        
        # –°–ª–æ–≤–∞—Ä—å —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ —É—Ä–æ–∫–æ–≤
        lesson_descriptions = {
            "1": "üéØ –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –∞–±–∞–∫—É—Å–æ–º, –ø—Ä—è–º–æ–π —Å—á–µ—Ç\n\nüìö –ß—Ç–æ —Ç–∞–∫–æ–µ –∞–±–∞–∫—É—Å –∏ –ø—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º. –£—á–∏–º—Å—è –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —á–∏—Å–ª–∞ –Ω–∞ —Å—á–µ—Ç–∞—Ö –∏ —Ä–µ—à–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã.",
            "2": "‚ûï –°–ª–æ–∂–µ–Ω–∏–µ –≤ –ø—è—Ç–µ—Ä–∫–µ –∏ –¥–µ—Å—è—Ç–∫–µ\n\nüî¢ –°–µ–∫—Ä–µ—Ç—ã —Å–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å—á–µ—Ç–∞—Ö –∞–±–∞–∫—É—Å, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ—Å—Ç–∞–≤ —á–∏—Å–µ–ª 5 –∏ 10.",
            "3": "‚ûï –ü—Ä–∏–±–∞–≤–ª—è–µ–º 1, 2, 3, 4\n\nüßÆ –£—á–∏–º—Å—è –ø—Ä–∏–±–∞–≤–ª—è—Ç—å —Ü–∏—Ñ—Ä—ã 1, 2, 3, 4 –∏ —Ä–µ—à–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Å —ç—Ç–∏–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏.",
            "4": "‚ûï –ò–∑—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ +5\n\nüñê –ö–∞–∫ –ø—Ä–∏–±–∞–≤–∏—Ç—å 5 –Ω–∞ —Å—á–µ—Ç–∞—Ö –∞–±–∞–∫—É—Å –∏ —Ä–µ—à–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Å —ç—Ç–æ–π —Ü–∏—Ñ—Ä–æ–π.",
            "5": "‚ûï –ò–∑—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ +6\n\n6Ô∏è‚É£ –ö–∞–∫ –ø—Ä–∏–±–∞–≤–∏—Ç—å 6 –Ω–∞ —Å—á–µ—Ç–∞—Ö –∞–±–∞–∫—É—Å –∏ —Ä–µ—à–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Å —ç—Ç–æ–π —Ü–∏—Ñ—Ä–æ–π.",
            "6": "‚ûï –ò–∑—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ +7\n\n7Ô∏è‚É£ –ö–∞–∫ –ø—Ä–∏–±–∞–≤–∏—Ç—å 7 –Ω–∞ —Å—á–µ—Ç–∞—Ö –∞–±–∞–∫—É—Å –∏ —Ä–µ—à–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Å —ç—Ç–æ–π —Ü–∏—Ñ—Ä–æ–π.",
            "7": "‚ûï –ò–∑—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ +8\n\n8Ô∏è‚É£ –ö–∞–∫ –ø—Ä–∏–±–∞–≤–∏—Ç—å 8 –Ω–∞ —Å—á–µ—Ç–∞—Ö –∞–±–∞–∫—É—Å –∏ —Ä–µ—à–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Å —ç—Ç–æ–π —Ü–∏—Ñ—Ä–æ–π.",
            "8": "‚ûï –ò–∑—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ +9\n\n9Ô∏è‚É£ –ö–∞–∫ –ø—Ä–∏–±–∞–≤–∏—Ç—å 9 –Ω–∞ —Å—á–µ—Ç–∞—Ö –∞–±–∞–∫—É—Å –∏ —Ä–µ—à–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Å —ç—Ç–æ–π —Ü–∏—Ñ—Ä–æ–π.",
            "9": "üß† –ß—Ç–æ –¥–∞–µ—Ç –º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞ –¥–µ—Ç—è–º?\n\nüí≠ –ü–æ–ª—å–∑–∞ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –¥–µ—Ç–µ–π.",
            "10": "–í—ã–ø—É—Å–∫ '–õ—É—á—à–µ –≤—Å–µ—Ö'"
        }
        
        # –ò—â–µ–º –≤–∏–¥–µ–æ—Ñ–∞–π–ª
        video_path = f"media/videos/{lesson_number}.mp4"
        
        if os.path.exists(video_path):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ - 50 –ú–ë)
            file_size = os.path.getsize(video_path)
            max_size = 50 * 1024 * 1024  # 50 –ú–ë –≤ –±–∞–π—Ç–∞—Ö
            
            if file_size > max_size:
                await callback.message.answer(
                    f"‚ùå <b>–í–∏–¥–µ–æ—É—Ä–æ–∫ {lesson_number} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π</b>\n\n"
                    f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size / (1024*1024):.1f} –ú–ë\n"
                    f"üìê –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë\n\n"
                    f"üîó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ.",
                    parse_mode="HTML"
                )
                logger.warning(f"–í–∏–¥–µ–æ—É—Ä–æ–∫ {lesson_number} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size / (1024*1024):.1f} –ú–ë")
                return
            
            try:
                description = lesson_descriptions.get(lesson_number, f"–£—Ä–æ–∫ {lesson_number}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                loading_msg = await callback.message.answer(
                    f"‚è≥ <b>–ó–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–∫ {lesson_number}...</b>\n\n"
                    f"üìπ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",
                    parse_mode="HTML"
                )
                
                video = FSInputFile(video_path)
                await callback.message.answer_video(
                    video=video,
                    caption=f"üìπ <b>–£—Ä–æ–∫ {lesson_number}</b>\n\n"
                            f"{description}\n\n"
                            f"üé¨ –ò–∑—É—á–∞–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –≤ —É–¥–æ–±–Ω–æ–º —Ç–µ–º–ø–µ –∏ –ø—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –≤–º–µ—Å—Ç–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º!",
                    parse_mode="HTML"
                )
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
                await loading_msg.delete()
                
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∏–¥–µ–æ—É—Ä–æ–∫ {lesson_number} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ—É—Ä–æ–∫–∞ {lesson_number}: {e}")
                await callback.message.answer(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–∫–∞ {lesson_number}</b>\n\n"
                    f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    f"‚Ä¢ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π\n" 
                    f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é\n"
                    f"‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode="HTML"
                )
        else:
            await callback.message.answer(
                f"‚ùå <b>–í–∏–¥–µ–æ—É—Ä–æ–∫ {lesson_number} –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                f"üìÅ –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤–∏–¥–µ–æ—É—Ä–æ–∫–æ–≤: {e}")
        try:
            await callback.message.answer(
                "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML"
            )
        except:
            # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ") 