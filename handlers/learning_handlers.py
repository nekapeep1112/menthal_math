from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio
import time
import logging

from database.database import db
from keyboards.main_keyboard import get_answer_keyboard, get_learning_keyboard, get_session_results_keyboard, get_main_menu
from utils.math_generator import math_generator
from utils.formatters import format_problem, format_session_result
from config import Config

router = Router()
logger = logging.getLogger(__name__)

class LearningStates(StatesGroup):
    solving_problem = State()
    waiting_custom_answer = State()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –æ–±—É—á–µ–Ω–∏—è
active_sessions = {}

class LearningSession:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–µ–π –æ–±—É—á–µ–Ω–∏—è"""
    
    def __init__(self, user_id: int, level: int, problems_per_session: int = None, time_per_problem: int = None):
        self.user_id = user_id
        self.level = level
        self.current_problem = 0
        self.correct_answers = 0
        self.total_problems = problems_per_session or Config.PROBLEMS_PER_LEVEL
        self.time_per_problem = time_per_problem or Config.TIME_LIMIT_SECONDS
        self.start_time = time.time()
        self.problems_data = []
        self.current_problem_start = None
        self.is_paused = False
        self.timer_task = None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Ç–∞–π–º–µ—Ä–∞
        
    def next_problem(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ"""
        self.current_problem += 1
        self.current_problem_start = time.time()
        
    def add_answer(self, user_answer: int, correct_answer: int, time_taken: float, problem_text: str = ""):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
        is_correct = user_answer == correct_answer
        if is_correct:
            self.correct_answers += 1
            
        self.problems_data.append({
            'problem_text': problem_text,
            'user_answer': user_answer,
            'correct_answer': correct_answer,
            'is_correct': is_correct,
            'time_taken': time_taken
        })
        
    def get_total_time(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏"""
        return time.time() - self.start_time
        
    def is_completed(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
        return self.current_problem >= self.total_problems
    
    def cancel_timer(self):
        """–û—Ç–º–µ–Ω–∞ —Ç–∞–π–º–µ—Ä–∞"""
        if self.timer_task and not self.timer_task.done():
            self.timer_task.cancel()
            self.timer_task = None

async def start_timer(session: LearningSession, message: Message):
    """–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –∑–∞–¥–∞—á–∏"""
    try:
        await asyncio.sleep(session.time_per_problem)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
        if session.user_id in active_sessions and active_sessions[session.user_id] == session:
            await handle_time_up(session.user_id, message, session)
    except asyncio.CancelledError:
        # –¢–∞–π–º–µ—Ä –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        pass
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {session.user_id}: {e}")

async def handle_time_up(user_id: int, message: Message, session: LearningSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∑–∞–¥–∞—á—É"""
    if user_id not in active_sessions or session != active_sessions[user_id]:
        return  # –°–µ—Å—Å–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∞
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ)
    time_taken = time.time() - session.current_problem_start if session.current_problem_start else session.time_per_problem
    session.add_answer(-1, session.current_correct_answer, time_taken, session.current_problem_text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    if session.is_completed():
        logger.info(f"–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ)")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é (–±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
        await finish_learning_session_simple(message, session, False, session.current_correct_answer)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        try:
            await message.edit_text(
                f"‚è∞ <b>–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!</b>\n\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{session.current_correct_answer}</b>",
                parse_mode="HTML"
            )
            await asyncio.sleep(2)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç 2 —Å–µ–∫—É–Ω–¥—ã
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É
        await send_next_problem(message, session, edit_message=True)

async def finish_learning_session_simple(message: Message, session: LearningSession, 
                                          last_answer_correct: bool = None, last_correct_answer: int = None):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è (–±–µ–∑ FSMContext)"""
    user_id = session.user_id
    logger.info(f"–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    total_time = session.get_total_time()
    accuracy = (session.correct_answers / session.total_problems) * 100
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success = await db.save_learning_session(
        telegram_id=user_id,
        level=session.level,
        problems_data=session.problems_data,
        total_time=total_time
    )
    
    if success:
        logger.info(f"–°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        new_achievements = await db.check_achievements(user_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
        if new_achievements:
            from utils.formatters import format_achievement_earned
            for achievement in new_achievements:
                achievement_text = format_achievement_earned(
                    achievement.name,
                    achievement.description,
                    achievement.icon
                )
                await message.answer(achievement_text, parse_mode="HTML")
    
    # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –∏ —É–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    if user_id in active_sessions:
        session.cancel_timer()
        del active_sessions[user_id]
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    from utils.formatters import format_session_result
    result_text = format_session_result(
        session.correct_answers,
        session.total_problems,
        total_time,
        session.level,
        last_answer_correct,
        last_correct_answer
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    from keyboards.main_keyboard import get_session_results_keyboard
    await message.answer(
        result_text,
        reply_markup=get_session_results_keyboard(),
        parse_mode="HTML"
    )
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∏–ª —Å–µ—Å—Å–∏—é. –†–µ–∑—É–ª—å—Ç–∞—Ç: {session.correct_answers}/{session.total_problems}")

async def start_learning_session(callback: CallbackQuery, state: FSMContext, level: int):
    """–ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from database.database import db
    user_settings = await db.get_user_settings(user_id)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    session = LearningSession(
        user_id, 
        level,
        problems_per_session=user_settings.get("problems_per_session"),
        time_per_problem=user_settings.get("time_per_problem")
    )
    active_sessions[user_id] = session
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(LearningStates.solving_problem)
    await state.update_data(level=level)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É
    await send_next_problem(callback.message, session, edit_message=True)
    
    await callback.answer("üéØ –°–µ—Å—Å–∏—è –æ–±—É—á–µ–Ω–∏—è –Ω–∞—á–∞—Ç–∞!")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Å–µ—Å—Å–∏—é –Ω–∞ —É—Ä–æ–≤–Ω–µ {level}")

async def send_next_problem(message: Message, session: LearningSession, edit_message: bool = False):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏"""
    # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    session.cancel_timer()
    
    session.next_problem()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
    problem_text, correct_answer = math_generator.generate_problem(session.level)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –≤ —Å–µ—Å—Å–∏–∏
    session.current_correct_answer = correct_answer
    session.current_problem_text = problem_text
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    formatted_problem = format_problem(
        problem_text,
        session.current_problem,
        session.total_problems,
        session.time_per_problem
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    answer_keyboard = get_answer_keyboard(correct_answer)
    
    if edit_message:
        await message.edit_text(
            formatted_problem,
            reply_markup=answer_keyboard,
            parse_mode="HTML"
        )
    else:
        await message.answer(
            formatted_problem,
            reply_markup=answer_keyboard,
            parse_mode="HTML"
        )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ
    session.timer_task = asyncio.create_task(
        start_timer(session, message)
    )

@router.callback_query(F.data.startswith("answer_"), LearningStates.solving_problem)
async def process_answer(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    
    if user_id not in active_sessions:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    session = active_sessions[user_id]
    
    # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª
    session.cancel_timer()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user_answer = int(callback.data.split("_")[1])
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç")
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è
    time_taken = time.time() - session.current_problem_start if session.current_problem_start else 0
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–µ—Å—Å–∏—é
    session.add_answer(user_answer, session.current_correct_answer, time_taken)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    is_correct = user_answer == session.current_correct_answer
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    if session.is_completed():
        logger.info(f"–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π
        try:
            await callback.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await finish_learning_session(callback.message, session, state, is_correct, session.current_correct_answer)
        await callback.answer()
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ popup
        if is_correct:
            await callback.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", show_alert=False)
        else:
            await callback.answer(
                f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {session.current_correct_answer}",
                show_alert=True
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É
        await send_next_problem(callback.message, session, edit_message=True)

@router.callback_query(F.data == "custom_answer", LearningStates.solving_problem)
async def request_custom_answer(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
    await state.set_state(LearningStates.waiting_custom_answer)
    
    await callback.message.answer(
        "‚úèÔ∏è <b>–í–≤–µ–¥–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç:</b>\n\n"
        "–ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
        parse_mode="HTML"
    )
    
    await callback.answer()

@router.message(LearningStates.waiting_custom_answer)
async def process_custom_answer(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
    user_id = message.from_user.id
    
    if user_id not in active_sessions:
        await message.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    session = active_sessions[user_id]
    
    # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª
    session.cancel_timer()
    
    try:
        user_answer = int(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç!</b>\n\n"
            "–í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 42",
            parse_mode="HTML"
        )
        return
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è
    time_taken = time.time() - session.current_problem_start if session.current_problem_start else 0
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–µ—Å—Å–∏—é
    session.add_answer(user_answer, session.current_correct_answer, time_taken)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    is_correct = user_answer == session.current_correct_answer
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á
    await state.set_state(LearningStates.solving_problem)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    if is_correct:
        result_text = "‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</b>"
    else:
        result_text = f"‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!</b>\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{session.current_correct_answer}</b>"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    if session.is_completed():
        await finish_learning_session(message, session, state, is_correct, session.current_correct_answer)
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É
        await message.answer(result_text, parse_mode="HTML")
        await send_next_problem(message, session)

async def finish_learning_session(message: Message, session: LearningSession, state: FSMContext, 
                                  last_answer_correct: bool = None, last_correct_answer: int = None):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è"""
    user_id = session.user_id
    logger.info(f"–§—É–Ω–∫—Ü–∏—è finish_learning_session –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    total_time = session.get_total_time()
    accuracy = (session.correct_answers / session.total_problems) * 100
    logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: –≤—Ä–µ–º—è={total_time:.1f}—Å, —Ç–æ—á–Ω–æ—Å—Ç—å={accuracy:.1f}%")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success = await db.save_learning_session(
        telegram_id=user_id,
        level=session.level,
        problems_data=session.problems_data,
        total_time=total_time
    )
    
    if success:
        logger.info(f"–°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        new_achievements = await db.check_achievements(user_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
        if new_achievements:
            from utils.formatters import format_achievement_earned
            for achievement in new_achievements:
                achievement_text = format_achievement_earned(
                    achievement.name,
                    achievement.description,
                    achievement.icon
                )
                await message.answer(achievement_text, parse_mode="HTML")
    else:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –∏ —É–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    if user_id in active_sessions:
        session.cancel_timer()
        del active_sessions[user_id]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    session_successful = accuracy >= 80
    await state.set_data({
        "last_completed_level": session.level,
        "last_session_successful": session_successful,
        "last_session_accuracy": accuracy
    })
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_text = format_session_result(
        session.correct_answers,
        session.total_problems,
        total_time,
        session.level,
        last_answer_correct,
        last_correct_answer
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–∏ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    from config import Config
    is_max_level = session.level >= Config.MAX_LEVEL
    
    await message.answer(
        result_text,
        reply_markup=get_session_results_keyboard(session_successful, is_max_level),
        parse_mode="HTML"
    )
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∏–ª —Å–µ—Å—Å–∏—é. –†–µ–∑—É–ª—å—Ç–∞—Ç: {session.correct_answers}/{session.total_problems}")

@router.callback_query(F.data == "stop_learning")
async def stop_learning(callback: CallbackQuery, state: FSMContext):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—É—á–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    
    if user_id in active_sessions:
        session = active_sessions[user_id]
        # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
        session.cancel_timer()
        await finish_learning_session(callback.message, session, state)
    else:
        await state.clear()
        await callback.message.edit_text(
            "‚ùå <b>–û–±—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</b>",
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
    
    await callback.answer("–û–±—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

@router.callback_query(F.data == "pause_learning")
async def pause_learning(callback: CallbackQuery):
    """–ü–∞—É–∑–∞ –≤ –æ–±—É—á–µ–Ω–∏–∏"""
    user_id = callback.from_user.id
    
    if user_id in active_sessions:
        session = active_sessions[user_id]
        session.is_paused = not session.is_paused
        
        if session.is_paused:
            text = "‚è∏Ô∏è <b>–û–±—É—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</b>\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
        else:
            text = "‚ñ∂Ô∏è <b>–û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–æ</b>\n\n–†–µ—à–∏ —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É!"
        
        await callback.answer(
            "‚è∏Ô∏è –ü–∞—É–∑–∞" if session.is_paused else "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ"
        )
    else:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

@router.callback_query(F.data == "repeat_level")
async def repeat_level(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å"""
    data = await state.get_data()
    level = data.get("last_completed_level", 1)
    
    await start_learning_session(callback, state, level)

@router.callback_query(F.data == "next_level")
async def next_level(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–º —É—Ä–æ–≤–Ω–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    last_completed_level = data.get("last_completed_level", 1)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_stats = await db.get_user_stats(user_id)
    current_available_level = user_stats.get("level", 1) if user_stats else 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    # –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    next_level_num = last_completed_level + 1
    
    if next_level_num > current_available_level:
        # –£—Ä–æ–≤–µ–Ω—å –µ—â–µ –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        await callback.answer(
            "üîí –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –µ—â–µ –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n"
            f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Ä–æ–≤–Ω—é {next_level_num} –Ω—É–∂–Ω–æ –Ω–∞–±—Ä–∞—Ç—å 80%+ —Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ {current_available_level}.",
            show_alert=True
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–ª—Å—è –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å {next_level_num}")
        return
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º
    next_level_num = min(next_level_num, Config.MAX_LEVEL)
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —Å —É—Ä–æ–≤–Ω—è {last_completed_level} –Ω–∞ —É—Ä–æ–≤–µ–Ω—å {next_level_num}")
    
    await start_learning_session(callback, state, next_level_num)

@router.callback_query(F.data == "detailed_stats")
async def show_detailed_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    stats = await db.get_user_stats(callback.from_user.id)
    from utils.formatters import format_user_stats
    
    await callback.message.answer(
        format_user_stats(stats),
        parse_mode="HTML"
    )
    
    await callback.answer()

@router.callback_query(F.data == "show_leaderboard")
async def show_leaderboard(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–µ—Å—Å–∏–∏"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏ –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    leaderboard = await db.get_leaderboard(limit=10)
    user_rank = await db.get_user_rank(user_id)
    
    from utils.formatters import format_leaderboard
    leaderboard_text = format_leaderboard(leaderboard, user_rank)
    
    await callback.message.answer(leaderboard_text, parse_mode="HTML")
    await callback.answer()

 