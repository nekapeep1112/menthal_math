from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

def get_main_menu() -> ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    builder = ReplyKeyboardBuilder()
    
    builder.row(
        KeyboardButton(text="üßÆ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ"),
        KeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    )
    builder.row(
        KeyboardButton(text="üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"),
        KeyboardButton(text="üèÖ –†–µ–π—Ç–∏–Ω–≥")
    )
    builder.row(
        KeyboardButton(text="üì∏ –£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"),
        KeyboardButton(text="üé¨ –í–∏–¥–µ–æ-—É—Ä–æ–∫–∏")
    )
    builder.row(
        KeyboardButton(text="üìã –®–ø–∞—Ä–≥–∞–ª–∫–∏"),
        KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    )
    builder.row(
        KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")
    )
    
    return builder.as_markup(resize_keyboard=True, persistent=True)

def get_level_selection(current_level: int = 1, max_level: int = 10) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è"""
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É—Ä–æ–≤–Ω–µ–π –ø–æ 3 –≤ —Ä—è–¥
    for level in range(1, max_level + 1):
        if level <= current_level:
            # –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
            text = f"üìö –£—Ä–æ–≤–µ–Ω—å {level}"
            if level == current_level:
                text = f"‚≠ê –£—Ä–æ–≤–µ–Ω—å {level}"
        else:
            # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
            text = f"üîí –£—Ä–æ–≤–µ–Ω—å {level}"
        
        builder.button(
            text=text,
            callback_data=f"level_{level}" if level <= current_level else "level_locked"
        )
    
    builder.adjust(3)  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    
    return builder.as_markup()

def get_learning_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="stop_learning"),
        InlineKeyboardButton(text="‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data="pause_learning")
    )
    
    return builder.as_markup()

def get_answer_keyboard(answer: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    builder = InlineKeyboardBuilder()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π + 3 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö
    import random
    answers = [answer]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    while len(answers) < 4:
        wrong_answer = answer + random.randint(-10, 10)
        if wrong_answer not in answers and wrong_answer >= 0:
            answers.append(wrong_answer)
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
    random.shuffle(answers)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    for ans in answers:
        builder.button(
            text=str(ans),
            callback_data=f"answer_{ans}"
        )
    
    builder.adjust(2)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    
    # –ö–Ω–æ–ø–∫–∞ –≤–≤–æ–¥–∞ —Å–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
    builder.row(
        InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç", callback_data="custom_answer")
    )
    
    return builder.as_markup()

def get_session_results_keyboard(session_successful: bool = True, is_max_level: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–µ—Å—Å–∏–∏"""
    builder = InlineKeyboardBuilder()
    
    # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if session_successful and not is_max_level:
        builder.row(
            InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="repeat_level"),
            InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å", callback_data="next_level")
        )
    else:
        # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–ª–∏ —ç—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å - —Ç–æ–ª—å–∫–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
        builder.row(
            InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="repeat_level")
        )
    
    builder.row(
        InlineKeyboardButton(text="üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats"),
        InlineKeyboardButton(text="üèÖ –†–µ–π—Ç–∏–Ω–≥", callback_data="show_leaderboard")
    )
    builder.row(
        InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
    )
    
    return builder.as_markup()

def get_settings_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞—á—É", callback_data="setting_time"),
        InlineKeyboardButton(text="üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á", callback_data="setting_problems")
    )
    builder.row(
        InlineKeyboardButton(text="üîä –ó–≤—É–∫–∏", callback_data="setting_sounds"),
        InlineKeyboardButton(text="üåô –¢–µ–º–Ω—ã–π —Ä–µ–∂–∏–º", callback_data="setting_theme")
    )
    builder.row(
        InlineKeyboardButton(text="üìà –°–ª–æ–∂–Ω–æ—Å—Ç—å", callback_data="setting_difficulty"),
        InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="reset_progress")
    )
    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    
    return builder.as_markup()

def get_confirmation_keyboard(action: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_{action}"),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel")
    )
    
    return builder.as_markup()

def get_photo_materials_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ-–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    builder = InlineKeyboardBuilder()
    
    # –ü–æ—à–∞–≥–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ (–≤—ã–¥–µ–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ)
    builder.row(
        InlineKeyboardButton(text="üìñ –ü–æ—à–∞–≥–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ", callback_data="start_step_learning")
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    materials = [
        ("üî¢ –û—Å–Ω–æ–≤—ã —Å—á–µ—Ç–∞", "photo_basics"),
        ("‚ûï –°–ª–æ–∂–µ–Ω–∏–µ", "photo_addition"),
        ("‚ûñ –í—ã—á–∏—Ç–∞–Ω–∏–µ", "photo_subtraction"),
        ("‚úñÔ∏è –£–º–Ω–æ–∂–µ–Ω–∏–µ", "photo_multiplication"),
        ("‚ûó –î–µ–ª–µ–Ω–∏–µ", "photo_division"),
        ("üßÆ –ú–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞", "photo_mental")
    ]
    
    for text, callback in materials:
        builder.button(text=text, callback_data=callback)
    
    builder.adjust(2)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    
    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    
    return builder.as_markup()

def get_video_lessons_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–µ–æ—É—Ä–æ–∫–æ–≤"""
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ —É—Ä–æ–∫–æ–≤ –ø–æ 2 –≤ —Ä—è–¥ (1-10 —É—Ä–æ–∫–æ–≤)
    for i in range(1, 11):
        builder.button(
            text=f"üìπ –£—Ä–æ–∫ {i}",
            callback_data=f"video_lesson_{i}"
        )
    
    builder.adjust(2)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    
    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    
    return builder.as_markup()



